# include "utility.h"

vector <string> getAllConsecutiveSubstringsOfLength(string s,int length)
{
    int d = 0;
    string s1 = "";
    vector <string> v;

    while(d + length <= s.size())
    {
        s1 = "";

        for(int i=d;i<d+length;i++) s1 += s[i];

        v.push_back(s1);

        d++;
    }

    return v;
}

vector <string> getAllConsecutiveSubstrings(string s)
{
    vector <string> v;

    for(int i=1;i<=s.size();i++)
    {
        for(int j=0;j<getAllConsecutiveSubstringsOfLength(s,i).size();j++)
        {
            v.push_back(getAllConsecutiveSubstringsOfLength(s,i)[j]);
        }
    }

    return v;
}

bool IsStringContainsLetter(string s,char c)
{
    for(int i=0;i<s.size();i++) if(s[i] == c) return true;

    return false;
}

string DistinctLetters(string s)
{
    string s1 = "";

    for(int i=0;i<s.size();i++)
    {
        if(!IsStringContainsLetter(s1,s[i])) s1 += s[i];
    }

    return s1;
}

bool IsStringHasUniqueLetters(string s)
{
    return DistinctLetters(s).size() == s.size();
}

string getLongestNonRepeatingString(string s)
{
    string s1 = "";
    int max_length = 0;

    for(int i=0;i<getAllConsecutiveSubstrings(s).size();i++)
    {
        if(IsStringHasUniqueLetters(getAllConsecutiveSubstrings(s)[i]) and getAllConsecutiveSubstrings(s)[i].size() > max_length)
        {
            s1 = getAllConsecutiveSubstrings(s)[i];
            max_length = getAllConsecutiveSubstrings(s)[i].size();
        }
    }

    return s1;
}

int main()
{
    cout<<getLongestNonRepeatingString("abcabcbb")<<endl;
    return 0;
}
